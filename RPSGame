import java.util.*;
public class RPSGame {
	//ENUM
	
	static enum Moves {
		ROCK, 
		PAPER, 
		SCISSORS;
	};
	
	//instantiate randomNum
	Random randomNum =  new Random();
	
	
	//Declare Instance Data Variables 
	private int numOfComputerWins;
	private int numOfUserWins;
	private int numOfTies;
	private boolean computerWin;
	private boolean userWin;

	private Moves computerMove;
	private Moves userMove;

	
	//Constructor
	public RPSGame(){
		numOfComputerWins=0;
		numOfUserWins=0;
		numOfTies=0;
	}
	//Getter and Setters
	//Getters
	public int getNumOfComputerWins(){
		return numOfComputerWins;
	}
	public int getNumOfUserWins(){
		return numOfUserWins;
	}
	public int getNumOfTies(){
		return numOfTies;
	}
	//Setters
	public void setNumOfComputerWins(int numOfComputerWins){
		this.numOfComputerWins=numOfComputerWins;
	}
	public void setNumOfUserWins(int numOfUserWins){
		this.numOfUserWins=numOfUserWins;
	}
	public void setNumOfTies(int numOfTies){
		this.numOfTies=numOfTies;
	}
	public void setUserMove(Moves userMove){
		this.userMove = userMove;
	}
	//toString Method
	public String toString(){
		String s = "User move: " + userMove + 
				"\nComputer Move: " + computerMove +
				"\nNumber Of Computer Wins:" + numOfComputerWins + 
				"\nNumber Of User Wins:" + numOfUserWins +
				"\nNumber of Ties:" + numOfTies;
		return s;
	}
	//Class Specific Methods
	
	//generateComputerPlay
	
	public Moves generateComputerPlay(){
		int randomNumber = randomNum.nextInt(3);

		if (randomNumber == 0) {
		computerMove = Moves.ROCK;
		}else if (randomNumber == 1) {
		computerMove = Moves.PAPER;
		}else{
		computerMove = Moves.SCISSORS;
		}
		return computerMove;
	}
	
	//findWinner
	
	public void findWinner(){
		computerWin = false;
		userWin = false;
		//need to pull in userMove
//		Moves userMove = null;
		if (computerMove == Moves.ROCK && userMove == Moves.SCISSORS){
			computerWin = true;
		} else if (computerMove == Moves.PAPER && userMove == Moves.ROCK){
			computerWin = true;
		} else if (computerMove == Moves.SCISSORS && userMove == Moves.PAPER){
			computerWin = true;
		} else if (userMove == Moves.ROCK && computerMove == Moves.SCISSORS){
			userWin = true;
		} else if (userMove == Moves.PAPER && computerMove == Moves.ROCK){
			userWin = true;
		} else if (userMove == Moves.SCISSORS && computerMove == Moves.PAPER){
			userWin = true;
		}
		
		if (computerWin == true){
			numOfComputerWins+=1;
		} else if (userWin == true){
			numOfUserWins+=1;
		}else {
			numOfTies+=1;
		}
	}
	
	public void gameStart(){
		Scanner scan = new Scanner(System.in);
		
		boolean on = true;
		while(on){
			System.out.println("Please Select " +
					"\nr for Rock" +
					"\np for Paper" + 
					"\ns for Scissors" +
					"\nq for Quit");
			String options = scan.nextLine();
			switch (options) {
			case "r":
				userMove = Moves.ROCK;
				break;
			case "p":
				userMove = Moves.PAPER;
				break;
			case "s":
				userMove = Moves.SCISSORS;
				break;

			case "q":
				on = false;
				break;
			default:
				System.out.println("Invalid Choice");
				
			}
			generateComputerPlay();
			findWinner();
			System.out.println("\n\nrUser Move: " + userMove);
			System.out.println("Computer Move: " + computerMove + "\n");
			if (computerWin == true){
				System.out.println("Computer Wins\n");
			}else if(userWin == true){
				System.out.println("You Win\n");
			}else {
				System.out.println("Tie\n");
			}
			System.out.println("Number Of Computer Wins:" + numOfComputerWins + 
				"\nNumber Of User Wins:" + numOfUserWins +
				"\nNumber of Ties:" + numOfTies + "\n\n");
		}
		

		
		
	}
}
