//Group Project 4
//Raymond Chen
//Maureen Wong
//Nian Liu

//Class to run RPSGUIGame

import java.util.Random;
import java.util.Scanner;

public class RPSGame {
	//ENUM
	
	static enum Moves {
		ROCK, 
		PAPER, 
		SCISSORS;
	};
	
	//instantiate randomNum
	Random randomNum =  new Random();
	
	
	//Declare Instance Data Variables 
	private int numOfComputerWins;
	private int numOfUserWins;
	private int numOfTies;
	private int numRounds;
	
	private double userBalance = 100;
	private double betAmount;
	
	private boolean computerWin;
	private boolean userWin;

	
	private Moves computerMove;
	private Moves userMove;
	
	private String winner;

	
	//Constructor
	public RPSGame(){
		numOfComputerWins=0;
		numOfUserWins=0;
		numOfTies=0;
	}
	//Getter and Setters
	
	//Getters
	public int getNumOfComputerWins(){
		return numOfComputerWins;
	}
	public int getNumOfUserWins(){
		return numOfUserWins;
	}
	public int getNumOfTies(){
		return numOfTies;
	}
	public int getNumRounds(){
		return numRounds;
	}
	public double getBetAmount(){
		return betAmount;
	}
	public double getUserBalance(){
		return userBalance;
	}
	
	public boolean getComputerWin(){
		return computerWin;
	}
	
	public boolean getUserWin(){
		return userWin;
	}
	
	public Moves getComputerMove(){
		return computerMove;
	}
	
	public Moves getUserMove(){
		return userMove;
	}
	
	public String getWinner(){
		return winner;
	}
	
	//Setters
	public void setNumOfComputerWins(int numOfComputerWins){
		this.numOfComputerWins=numOfComputerWins;
	}
	public void setNumOfUserWins(int numOfUserWins){
		this.numOfUserWins=numOfUserWins;
	}
	public void setNumOfTies(int numOfTies){
		this.numOfTies=numOfTies;
	}
	public void setNumRounds(int numRounds){
		this.numRounds = numRounds;
	}
	public void setBetAmount(double betAmount){
		this.betAmount = betAmount;
	}
	public void setUserBalance(double userBalance){
		this.userBalance = userBalance;
	}
	public void setComputerWin(boolean winner){
		this.computerWin = winner;
	}
	public void setUserWin(boolean winner){
		this.userWin = winner;
	}
	public void setComputerMove(Moves computerMove){
		this.computerMove=computerMove;
	}
	public void setUserMove(Moves userMove){
		this.userMove = userMove;
		
	}
	public void setWinner(String winner){
		this.winner = winner;
	}
	
	//toString Method
	public String toString(){
		String s = "Number Of Computer Wins:" + numOfComputerWins + "\nNumber Of User Wins:" + numOfUserWins +
				"Number of Ties:" + numOfTies;
		return s;
	}
	//Class Specific Methods
	
	//generateComputerPlay
	
	public Moves generateComputerPlay(){
		int randomNumber = randomNum.nextInt(3);

		if (randomNumber == 0) {
		computerMove = Moves.ROCK;
		}else if (randomNumber == 1) {
		computerMove = Moves.PAPER;
		}else{
		computerMove = Moves.SCISSORS;
		}
		return computerMove;
	}
	
	//generateUserPlay
	
	public Moves generateUserPlay(){
		Scanner scan = new Scanner(System.in);
			System.out.println("Please Select " +
					"\nr for Rock" +
					"\np for Paper" + 
					"\ns for Scissors" +
					"\nq for Quit");
			boolean userChoice = true;
			while(userChoice){
			String options = scan.nextLine();
			switch (options) {
			case "r":
				userMove = Moves.ROCK;
				userChoice = false;
				break;
			case "p":
				userMove = Moves.PAPER;
				userChoice = false;
				break;
			case "s":
				userMove = Moves.SCISSORS;
				userChoice = false;
				break;
			default:
				System.out.println("Invalid Choice");
			}
			}
		return userMove;
	}
	
	
	//findWinner
	
	public String findWinner(){
		computerWin = false;
		userWin = false;
		if (computerMove == Moves.ROCK && userMove == Moves.SCISSORS){
			computerWin = true;
			setComputerWin(true);
		} else if (computerMove == Moves.PAPER && userMove == Moves.ROCK){
			computerWin = true;
			setComputerWin(true);
		} else if (computerMove == Moves.SCISSORS && userMove == Moves.PAPER){
			computerWin = true;
			setComputerWin(true);
		} else if (userMove == Moves.ROCK && computerMove == Moves.SCISSORS){
			userWin = true;
			setUserWin(true);
		} else if (userMove == Moves.PAPER && computerMove == Moves.ROCK){
			userWin = true;
			setUserWin(true);
		} else if (userMove == Moves.SCISSORS && computerMove == Moves.PAPER){
			userWin = true;
			setUserWin(true);
		} 
		
		winner = "";
		if (computerWin == true){
			numOfComputerWins+=1;
			winner = "Computer Wins";
		} else if (userWin == true){
			numOfUserWins+=1;
			winner = "User Wins";
		}else {
			numOfTies+=1;
			winner = "Tie Game";
		}
		
		return winner;
	}
	//betting function
	public double betting(){
		//Ask Betting
		System.out.println("Would you like to place a bet? y/n");
		Scanner scan = new Scanner(System.in);
		
		String bet = scan.nextLine();
		
		boolean betting;
		
		if (bet.equalsIgnoreCase("y")){

		System.out.println("Your Account Balance is:" + userBalance + 
				"\nPlease Select Amount for Betting: ");
		betAmount = Double.parseDouble(scan.nextLine());
		while (betAmount > userBalance){
			System.out.println("Betting Amount Above User Balance: " + userBalance + 
					"\nPlease Select Another Amount for Betting: ");
			betAmount = Double.parseDouble(scan.nextLine());
			}
		}else {
			betAmount = 0;
		}
		return betAmount;
	}

	//betting results update balance
	public void bettingResults(){
			if(userWin == true){
				userBalance += betAmount;
			} else if (computerWin == true) {
				userBalance -= betAmount;
			} else {
				userBalance = userBalance;
			}
		}
	
}
	

