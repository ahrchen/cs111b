//Group Project 4
//Raymond Chen
//Maureen Wong
//Nian Liu

//Runs RPSGame Class and performs betting extra credit

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

public class RPSGUIGame extends JFrame {

	// buttons for the user to enter their move
	private JButton rockButton, paperButton, scissorsButton;

	// labels to display the number of wins/losses/ties/currentBalance
	private JLabel statusC, statusU, statusT, statusB;

	// images and labels to display the computer and user's moves and the outcome of a match-up
	private ImageIcon rockImage, paperImage, scissorsImage;
	private JLabel compPlay, userPlay;
	private JLabel outcome;
	
	// the game object
	private RPSGame game;

	public RPSGUIGame() {

		// initializes the window
		super("Rock, Paper, Scissors, Go!");
		setSize(500, 300);
		Container contentPane = getContentPane();
		contentPane.setLayout(new BorderLayout());
		contentPane.setBackground(Color.black);
		setResizable(false);

		// creates the game object
		// 	NOTE: IF COMPLETING THE EXTRA CREDIT, YOU WILL NEED TO ADD A PARAMETER TO REPRESENT THE BET AMOUNT
		game = new RPSGame();


		// creates the labels for displaying the computer and user's move;
		// the images for the moves and the outcome of a match-up will be displayed
		// in a single panel
		rockImage = new ImageIcon("rock.jpg");
		paperImage = new ImageIcon("paper.jpg");
		scissorsImage = new ImageIcon("scissors.jpg");

		compPlay = new JLabel();
		compPlay.setVerticalTextPosition(SwingConstants.BOTTOM);
		compPlay.setHorizontalTextPosition(SwingConstants.CENTER);
		compPlay.setBorder(BorderFactory.createLineBorder(Color.black, 5));
		compPlay.setForeground(Color.cyan);
		userPlay = new JLabel();
		userPlay.setVerticalTextPosition(SwingConstants.BOTTOM);
		userPlay.setHorizontalTextPosition(SwingConstants.CENTER);
		userPlay.setBorder(BorderFactory.createLineBorder(Color.black, 5));
		userPlay.setForeground(Color.cyan);
		
		outcome = new JLabel();
		outcome.setHorizontalTextPosition(SwingConstants.CENTER);
		outcome.setForeground(Color.pink);
		
		JPanel imageOutcomePanel = new JPanel();
		imageOutcomePanel.setBackground(Color.black);
		imageOutcomePanel.setLayout(new BorderLayout());
		imageOutcomePanel.add(compPlay, BorderLayout.WEST);
		imageOutcomePanel.add(userPlay, BorderLayout.EAST);
		imageOutcomePanel.add(outcome, BorderLayout.SOUTH);
		
		// creates the labels for the status of the game (number of wins, losses, and ties);
		// the status labels will be displayed in a single panel
		statusC = new JLabel("Computer Wins: " + game.getNumOfComputerWins());
		statusU = new JLabel("User Wins: " + game.getNumOfUserWins());
		statusT = new JLabel("Ties: " + game.getNumOfTies());
		statusB = new JLabel("Current Balance: " + game.getUserBalance());
		statusC.setForeground(Color.white);
		statusU.setForeground(Color.white);
		statusT.setForeground(Color.white);
		statusB.setForeground(Color.white);
		JPanel statusPanel = new JPanel();
		statusPanel.setBackground(Color.black);
		statusPanel.add(statusC);
		statusPanel.add(statusU);
		statusPanel.add(statusT);
		statusPanel.add(statusB);
		// the play and status panels are nested in a single panel
		JPanel gamePanel = new JPanel();
		gamePanel.setPreferredSize(new Dimension(250, 250));
		gamePanel.setBackground(Color.black);
		gamePanel.add(imageOutcomePanel);
		gamePanel.add(statusPanel);
		
		// creates the buttons and displays them in a control panel;
		// one listener is used for all three buttons
		rockButton = new JButton("Play Rock");
		rockButton.addActionListener(new GameListener());
		paperButton = new JButton("Play Paper");
		paperButton.addActionListener(new GameListener());
		scissorsButton = new JButton("Play Scissors");
		scissorsButton.addActionListener(new GameListener());

		JPanel controlPanel = new JPanel();
		controlPanel.add(rockButton);
		controlPanel.add(paperButton);
		controlPanel.add(scissorsButton);
		controlPanel.setBackground(Color.black);

		// the gaming and control panel are added to the window
		contentPane.add(gamePanel, BorderLayout.CENTER);
		contentPane.add(controlPanel, BorderLayout.SOUTH);
		
		setVisible(true);
	}

	/* determines which button was clicked and updates the game accordingly */
	private class GameListener implements ActionListener {
		public void actionPerformed(ActionEvent event) {
			betting();//call betting related functions
			//get user play from GUI
			if (event.getSource() == rockButton){
				userPlay.setIcon(rockImage);
				game.setUserMove(RPSGame.Moves.ROCK);
			}else if (event.getSource() == paperButton){
				userPlay.setIcon(paperImage);
				game.setUserMove(RPSGame.Moves.PAPER);
			}else if (event.getSource() == scissorsButton){
				userPlay.setIcon(scissorsImage);
				game.setUserMove(RPSGame.Moves.SCISSORS);
			}
			computerPlay();//get computer play
			game.findWinner();//determine the winner 
			game.bettingResults();//update user balance after end of game
			updateGameStatus();//update the labels to reflect current status of game
			
	}
	//method for betting related function, display betting messages
	private void betting(){
		int userChoice = JOptionPane.showConfirmDialog(null, "Would you like to place a bet? ");
		if(userChoice==JOptionPane.YES_OPTION){
			String userStringBetAmount = JOptionPane.showInputDialog(null, "Please Select Amount for Betting: \nYour Current Balance is: " + game.getUserBalance());
			double userDoubleBetAmount = Double.parseDouble(userStringBetAmount); 
			while (userDoubleBetAmount > game.getUserBalance()){
				userStringBetAmount = JOptionPane.showInputDialog(null, "Please Select An Amount Below Current Balance for Betting: \nYour Current Balance is: " + game.getUserBalance());
				userDoubleBetAmount = Double.parseDouble(userStringBetAmount); 
			}
			game.setBetAmount(userDoubleBetAmount);
		} else {
			game.setBetAmount(0);
		}
		}
		
	}
	//call RPSGame class to generate computer play and update image
	private void computerPlay(){
		RPSGame.Moves compMove = game.generateComputerPlay();
		if (compMove == RPSGame.Moves.ROCK){
			compPlay.setIcon(rockImage);
		}else if (compMove == RPSGame.Moves.PAPER){
			compPlay.setIcon(paperImage);
		}else if (compMove == RPSGame.Moves.SCISSORS){
			compPlay.setIcon(scissorsImage);
		}
	}
	//update the GameStatus
	private void updateGameStatus(){
		outcome.setText("Winner: " + game.getWinner());
		statusC.setText("Computer Wins: " + game.getNumOfComputerWins());
		statusU.setText("User Wins: " + game.getNumOfUserWins());
		statusT.setText("Ties: " + game.getNumOfTies());
		statusB.setText("Current Balance: " + game.getUserBalance());
	}

	
	public static void main(String args[]) {
		// create an object of your class
		RPSGUIGame frame = new RPSGUIGame();
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	}
}
